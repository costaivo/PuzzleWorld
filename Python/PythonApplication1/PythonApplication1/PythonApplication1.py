
#from math import sin,cos,radians
#import sys

#def make_dot_string(x):
#    return ' ' * int (10 * cos(radians(x))+10)+'o'

##assert make_dot_string(90) =='       o'
##assert make_dot_string(180) =='o'

#def main():
#    for i in range(100000):
#        s = make_dot_string(i)
#        print(s)


#if __name__ =="__main__":
#    sys.exit(int(main() or 0))

"""
Problem 1 : Multiples of 3 and 5
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
"""
#def find_natural_numbers(n):
#    i=1
#    sum=0
#    nautral_number_1 =3
#    nautral_number_2 =5
#    while(i<n):
#        if((i % nautral_number_1) == 0):
#            sum = sum + i
#        elif ((i % nautral_number_2) ==0):
#            sum = sum +i
#        i =i+1
#    return sum


#number =  find_natural_numbers(1000)

#print (number)


"""
Problem 1 : Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""
#def even_fibonacci_numbers(n):
#    count=0
#    sum=0
#    oldFib =1
#    newFib =1
#    curFib=0
#    while(curFib <= n):
#        curFib = oldFib+newFib
#        if (curFib%2 ==0):
#            sum = sum + curFib
#        oldFib =newFib
#        newFib =curFib
#    return sum



#sum = even_fibonacci_numbers(4000000)
#print (sum)

"""
Problem 4 : Largest palindrome product
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.
"""
def check_if_palindrome(n):
    string = str(n)
    length = len(string)
    counter = 0
    while (counter < (length-1)-counter):
        if(string[counter] != string[(length-1)-counter]):
            return False
        counter=counter +1
    return True
        
def largest_palindrome():
    digit_1 = 100
    digit_2 =100
    max_3_digit_palindrome =0
    while (digit_1 <= 999):
        while (digit_2 <= 999):
            product = digit_1 * digit_2
            if(check_if_palindrome(product)):
                max_3_digit_palindrome  = product
            digit_2 = digit_2+1
        digit_2=100
        digit_1 = digit_1+1
    print (max_3_digit_palindrome)
    return max_3_digit_palindrome


largest_palindrome()

